// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XEDGE_DETECT_H
#define XEDGE_DETECT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xedge_detect_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtl_bus_BaseAddress;
} XEdge_detect_Config;
#endif

typedef struct {
    u32 Crtl_bus_BaseAddress;
    u32 IsReady;
} XEdge_detect;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XEdge_detect_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XEdge_detect_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XEdge_detect_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XEdge_detect_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XEdge_detect_Initialize(XEdge_detect *InstancePtr, u16 DeviceId);
XEdge_detect_Config* XEdge_detect_LookupConfig(u16 DeviceId);
int XEdge_detect_CfgInitialize(XEdge_detect *InstancePtr, XEdge_detect_Config *ConfigPtr);
#else
int XEdge_detect_Initialize(XEdge_detect *InstancePtr, const char* InstanceName);
int XEdge_detect_Release(XEdge_detect *InstancePtr);
#endif

void XEdge_detect_Start(XEdge_detect *InstancePtr);
u32 XEdge_detect_IsDone(XEdge_detect *InstancePtr);
u32 XEdge_detect_IsIdle(XEdge_detect *InstancePtr);
u32 XEdge_detect_IsReady(XEdge_detect *InstancePtr);
void XEdge_detect_EnableAutoRestart(XEdge_detect *InstancePtr);
void XEdge_detect_DisableAutoRestart(XEdge_detect *InstancePtr);


void XEdge_detect_InterruptGlobalEnable(XEdge_detect *InstancePtr);
void XEdge_detect_InterruptGlobalDisable(XEdge_detect *InstancePtr);
void XEdge_detect_InterruptEnable(XEdge_detect *InstancePtr, u32 Mask);
void XEdge_detect_InterruptDisable(XEdge_detect *InstancePtr, u32 Mask);
void XEdge_detect_InterruptClear(XEdge_detect *InstancePtr, u32 Mask);
u32 XEdge_detect_InterruptGetEnabled(XEdge_detect *InstancePtr);
u32 XEdge_detect_InterruptGetStatus(XEdge_detect *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
