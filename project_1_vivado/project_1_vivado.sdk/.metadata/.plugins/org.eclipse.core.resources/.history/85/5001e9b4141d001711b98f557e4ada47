/*
 * Empty C++ Application
 */
#include <stdio.h>
#include "xaxidma.h"
#include "xedge_detect.h"
#include "xtime_l.h"

#define IMAGE_SIZE 128*128

#define MEM_BASE_ADDR     0X01000000
#define TX_BUFFER_BASE    MEM_BASE_ADDR+0X00100000
#define RX_BUFFER_BASE    MEM_BASE_ADDR+0X00300000

//Get a pointer to TX and RX DMA Buffer (Configure DMA)
unsigned char *m_dma_buffer_TX = (unsigned char*)TX_BUFFER_BASE;
unsigned char *m_dma_buffer_RX = (unsigned char*)RX_BUFFER_BASE;
unsigned char inputImg_hw[IMAGE_SIZE*3];

XAxiDma axiDma;

int initDMA()
{
	XAxiDma_Config *CfgPtr;
	CfgPtr = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
	XAxiDma_CfgInitialize(&axiDma, CfgPtr);
	//Disable Interrupts
	XAxiDma_IntrDisable(&axiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&axiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
	return XST_SUCCESS;
}

XEdge_detect edgeDetect;
int initEdgeDetection()
{
	int status;
	XEdge_detect_Config *edgeDetect_cfg;
	edgeDetect_cfg = XEdge_detect_LookupConfig(XPAR_EDGE_DETECT_0_DEVICE_ID);
	if(!edgeDetect_cfg)
	{
		printf("Error loading configuration for edge detection\n");
	}
	status = XEdge_detect_CfgInitialize(&edgeDetect, edgeDetect_cfg);
	if(status != XST_SUCCESS)
	{
		printf("Error initializing edge detect instance\n");
	}
	return status;
}

int main()
{
    initDMA();
    initEdgeDetection();

    printf("Doing edge detection on hardware..\n");

    //Populate data from header file and put it in memory
    for (int idx = 0; idx < IMAGE_SIZE; idx++)
    {
    	inputImg_hw[i] = img[idx];
    }

    //AxiTimerHelper axiTimer;
    XTime tStart, tEnd;
    //Reference : https://forums.xilinx.com/xlnx/attachments/xlnx/EMBEDDED/17960/1/sdk_main.cc
    // Video Reference: https://www.youtube.com/watch?v=UobM_XgBdEg&t=316s
    //AxiTimerHelper axiTimer;
    printf("Starting...\n");
    XTime_GetTime(&tStart);
    XEdge_detect_Start(&edgeDetect);

    //Do DMA Transfer to push input image and get output image
    Xil_DCacheFlushRange((u32)inputImg_hw, IMAGE_SIZE*sizeof(unsigned int));
    Xil_DCacheFlushRange((u32)m_dma_buffer_RX, IMAGE_SIZE*sizeof(unsigned int));

    XAxiDma_SimpleTransfer(&axiDma,(u32)inputImg_hw,IMAGE_SIZE*sizeof(unsigned int),XAXIDMA_DMA_TO_DEVICE);
   	XAxiDma_SimpleTransfer(&axiDma,(u32)m_dma_buffer_RX,IMAGE_SIZE*sizeof(unsigned int),XAXIDMA_DEVICE_TO_DMA);

    //Wait transfers to finish
    while(XAxiDma_Busy(&axiDma,XAXIDMA_DMA_TO_DEVICE));
    while(XAxiDma_Busy(&axiDma,XAXIDMA_DEVICE_TO_DMA));

    // Invalidate the cache to avoid reading garbage
    Xil_DCacheInvalidateRange((u32)m_dma_buffer_RX, IMAGE_SIZE*sizeof(unsigned int));
    //axiTimer.stopTimer();

    //double HW_elapsed = axiTimer.getElapsedTimerInSeconds();
    //printf("HW execution time: %f sec\n", HW_elapsed);
	return 0;
}
