// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="edge_detect,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.480250,HLS_SYN_LAT=4260360,HLS_SYN_TPT=none,HLS_SYN_MEM=48,HLS_SYN_DSP=28,HLS_SYN_FF=3372,HLS_SYN_LUT=6408}" *)

module edge_detect (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'b1;
parameter    ap_ST_fsm_pp0_stage0 = 35'b10;
parameter    ap_ST_fsm_state4 = 35'b100;
parameter    ap_ST_fsm_state5 = 35'b1000;
parameter    ap_ST_fsm_state6 = 35'b10000;
parameter    ap_ST_fsm_state7 = 35'b100000;
parameter    ap_ST_fsm_state8 = 35'b1000000;
parameter    ap_ST_fsm_state9 = 35'b10000000;
parameter    ap_ST_fsm_state10 = 35'b100000000;
parameter    ap_ST_fsm_state11 = 35'b1000000000;
parameter    ap_ST_fsm_state12 = 35'b10000000000;
parameter    ap_ST_fsm_state13 = 35'b100000000000;
parameter    ap_ST_fsm_state14 = 35'b1000000000000;
parameter    ap_ST_fsm_state15 = 35'b10000000000000;
parameter    ap_ST_fsm_state16 = 35'b100000000000000;
parameter    ap_ST_fsm_state17 = 35'b1000000000000000;
parameter    ap_ST_fsm_state18 = 35'b10000000000000000;
parameter    ap_ST_fsm_state19 = 35'b100000000000000000;
parameter    ap_ST_fsm_state20 = 35'b1000000000000000000;
parameter    ap_ST_fsm_state21 = 35'b10000000000000000000;
parameter    ap_ST_fsm_state22 = 35'b100000000000000000000;
parameter    ap_ST_fsm_state23 = 35'b1000000000000000000000;
parameter    ap_ST_fsm_state24 = 35'b10000000000000000000000;
parameter    ap_ST_fsm_state25 = 35'b100000000000000000000000;
parameter    ap_ST_fsm_state26 = 35'b1000000000000000000000000;
parameter    ap_ST_fsm_state27 = 35'b10000000000000000000000000;
parameter    ap_ST_fsm_state28 = 35'b100000000000000000000000000;
parameter    ap_ST_fsm_state29 = 35'b1000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 35'b10000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 35'b100000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 35'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 35'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 35'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 35'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 35'b10000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv64_3FFF = 64'b11111111111111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv64_3FD3212D77318FC5 = 64'b11111111010011001000010010110101110111001100011000111111000101;
parameter    ap_const_lv64_3FBD2F1A9FBE76C9 = 64'b11111110111101001011110001101010011111101111100111011011001001;
parameter    ap_const_lv64_3FE2C8B439581062 = 64'b11111111100010110010001011010000111001010110000001000001100010;
parameter    ap_const_lv15_4000 = 15'b100000000000000;
parameter    ap_const_lv15_1 = 15'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv14_3FFF = 14'b11111111111111;
parameter    ap_const_lv14_1 = 14'b1;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [3:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [4:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [3:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [4:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [3:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [3:0] inStream_V_user_V_0_payload_A;
reg   [3:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [4:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [4:0] inStream_V_dest_V_0_payload_A;
reg   [4:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_in;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [3:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [3:0] outStream_V_user_V_1_payload_A;
reg   [3:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_in;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [4:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [4:0] outStream_V_dest_V_1_payload_A;
reg   [4:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [7:0] x_op_q0;
wire   [7:0] y_op_q0;
reg    inStream_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond1_reg_671;
reg    outStream_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state35;
wire   [0:0] ap_CS_fsm_state36;
reg   [4:0] tmp_id_V_reg_291;
reg   [3:0] tmp_user_V_reg_304;
reg   [3:0] tmp_strb_V_reg_317;
reg   [3:0] tmp_keep_V_reg_330;
reg   [4:0] tmp_dest_V_reg_343;
reg   [14:0] idx_reg_356;
wire   [63:0] grp_fu_403_p2;
reg   [63:0] reg_420;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] exitcond1_fu_426_p2;
wire   [14:0] idx_2_fu_432_p2;
reg   [14:0] idx_2_reg_675;
reg    ap_enable_reg_pp0_iter0;
wire   [14:0] i_fu_502_p2;
reg   [14:0] i_reg_708;
wire   [0:0] ap_CS_fsm_state5;
wire   [63:0] tmp_i_fu_508_p1;
reg   [63:0] tmp_i_reg_713;
wire   [0:0] exitcond_i_fu_496_p2;
wire   [7:0] pixelIn_red_q0;
reg   [7:0] pixelIn_red_load_reg_729;
wire   [0:0] ap_CS_fsm_state6;
wire   [7:0] pixelIn_green_q0;
reg   [7:0] pixelIn_green_load_reg_734;
wire   [31:0] tmp_i_16_fu_514_p1;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state10;
wire   [63:0] grp_fu_414_p1;
reg   [63:0] tmp_28_i_reg_754;
wire   [0:0] ap_CS_fsm_state11;
wire   [63:0] grp_fu_417_p1;
reg   [63:0] tmp_31_i_reg_759;
wire   [7:0] pixelIn_blue_q0;
reg   [7:0] pixelIn_blue_load_reg_764;
wire   [31:0] tmp_34_i_fu_522_p1;
wire   [0:0] ap_CS_fsm_state12;
reg   [63:0] tmp_35_i_reg_774;
wire   [0:0] ap_CS_fsm_state16;
wire   [63:0] grp_fu_408_p2;
reg   [63:0] tmp_32_i_reg_779;
wire   [63:0] grp_fu_399_p2;
reg   [63:0] tmp_33_i_reg_784;
reg   [10:0] loc_V_reg_789;
wire   [0:0] ap_CS_fsm_state27;
wire   [51:0] loc_V_1_fu_540_p1;
reg   [51:0] loc_V_1_reg_795;
wire   [13:0] idx_3_fu_650_p2;
reg   [13:0] idx_3_reg_803;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] exitcond_fu_644_p2;
wire   [31:0] tmp_data_V_1_fu_661_p1;
wire   [31:0] tmp_data_V_fu_666_p1;
reg   [13:0] temp_image_address0;
reg    temp_image_ce0;
reg    temp_image_we0;
wire   [7:0] temp_image_q0;
reg   [13:0] edge_out_assign_address0;
reg    edge_out_assign_ce0;
reg    edge_out_assign_we0;
wire   [7:0] edge_out_assign_q0;
reg   [13:0] grayOut_address0;
reg    grayOut_ce0;
reg    grayOut_we0;
wire   [7:0] grayOut_d0;
wire   [7:0] grayOut_q0;
reg   [13:0] pixelIn_blue_address0;
reg    pixelIn_blue_ce0;
reg    pixelIn_blue_we0;
wire   [7:0] pixelIn_blue_d0;
reg   [13:0] pixelIn_green_address0;
reg    pixelIn_green_ce0;
reg    pixelIn_green_we0;
wire   [7:0] pixelIn_green_d0;
reg   [13:0] pixelIn_red_address0;
reg    pixelIn_red_ce0;
reg    pixelIn_red_we0;
wire   [7:0] pixelIn_red_d0;
wire    grp_convolution_fu_390_ap_start;
wire    grp_convolution_fu_390_ap_done;
wire    grp_convolution_fu_390_ap_idle;
wire    grp_convolution_fu_390_ap_ready;
wire   [13:0] grp_convolution_fu_390_conv_in_address0;
wire    grp_convolution_fu_390_conv_in_ce0;
reg   [7:0] grp_convolution_fu_390_conv_in_q0;
wire   [3:0] grp_convolution_fu_390_kernel_address0;
wire    grp_convolution_fu_390_kernel_ce0;
reg   [7:0] grp_convolution_fu_390_kernel_q0;
wire   [13:0] grp_convolution_fu_390_conv_out_address0;
wire    grp_convolution_fu_390_conv_out_ce0;
wire    grp_convolution_fu_390_conv_out_we0;
wire   [7:0] grp_convolution_fu_390_conv_out_d0;
reg   [14:0] idx_phi_fu_360_p4;
reg   [14:0] i_i_reg_368;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] ap_CS_fsm_state4;
reg   [13:0] idx_1_reg_379;
wire   [0:0] ap_CS_fsm_state31;
reg    ap_reg_grp_convolution_fu_390_ap_start;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state29;
wire   [63:0] tmp_5_fu_467_p1;
wire   [63:0] tmp_8_fu_656_p1;
reg    ap_condition_1292;
reg   [63:0] grp_fu_399_p0;
reg   [63:0] grp_fu_399_p1;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state23;
reg   [63:0] grp_fu_403_p0;
reg   [63:0] grp_fu_403_p1;
reg   [31:0] grp_fu_414_p0;
wire   [31:0] grp_fu_417_p0;
wire   [63:0] p_Val2_s_fu_526_p1;
wire   [52:0] p_Result_s_fu_544_p3;
wire   [11:0] tmp_i_i_i_i_cast2_fu_555_p1;
wire   [11:0] sh_assign_fu_558_p2;
wire   [10:0] tmp_i_i_i_17_fu_572_p2;
wire   [0:0] isNeg_fu_564_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_577_p1;
wire   [11:0] sh_assign_1_fu_581_p3;
wire  signed [31:0] sh_assign_1_cast_fu_589_p1;
wire   [52:0] tmp_1_i_i_i_cast_fu_597_p1;
wire   [111:0] tmp_i_i_i_fu_551_p1;
wire   [111:0] tmp_1_i_i_i_fu_593_p1;
wire   [52:0] tmp_2_i_i_i_fu_601_p2;
wire   [0:0] tmp_10_fu_613_p3;
wire   [111:0] tmp_3_i_i_i_fu_607_p2;
wire   [7:0] tmp_2_fu_621_p1;
wire   [7:0] tmp_3_fu_625_p4;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'b1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'b00;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'b00;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'b00;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'b00;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'b00;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'b00;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'b00;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'b00;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'b00;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'b00;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'b00;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'b00;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_grp_convolution_fu_390_ap_start = 1'b0;
end

edge_detect_x_op #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
x_op_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_convolution_fu_390_kernel_address0),
    .ce0(grp_convolution_fu_390_kernel_ce0),
    .q0(x_op_q0)
);

edge_detect_y_op #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
y_op_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_convolution_fu_390_kernel_address0),
    .ce0(grp_convolution_fu_390_kernel_ce0),
    .q0(y_op_q0)
);

edge_detect_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
edge_detect_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp_image_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_image_address0),
    .ce0(temp_image_ce0),
    .we0(temp_image_we0),
    .d0(grp_convolution_fu_390_conv_out_d0),
    .q0(temp_image_q0)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
edge_out_assign_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(edge_out_assign_address0),
    .ce0(edge_out_assign_ce0),
    .we0(edge_out_assign_we0),
    .d0(grp_convolution_fu_390_conv_out_d0),
    .q0(edge_out_assign_q0)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
grayOut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grayOut_address0),
    .ce0(grayOut_ce0),
    .we0(grayOut_we0),
    .d0(grayOut_d0),
    .q0(grayOut_q0)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
pixelIn_blue_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixelIn_blue_address0),
    .ce0(pixelIn_blue_ce0),
    .we0(pixelIn_blue_we0),
    .d0(pixelIn_blue_d0),
    .q0(pixelIn_blue_q0)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
pixelIn_green_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixelIn_green_address0),
    .ce0(pixelIn_green_ce0),
    .we0(pixelIn_green_we0),
    .d0(pixelIn_green_d0),
    .q0(pixelIn_green_q0)
);

edge_detect_temp_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
pixelIn_red_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixelIn_red_address0),
    .ce0(pixelIn_red_ce0),
    .we0(pixelIn_red_we0),
    .d0(pixelIn_red_d0),
    .q0(pixelIn_red_q0)
);

convolution grp_convolution_fu_390(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_fu_390_ap_start),
    .ap_done(grp_convolution_fu_390_ap_done),
    .ap_idle(grp_convolution_fu_390_ap_idle),
    .ap_ready(grp_convolution_fu_390_ap_ready),
    .conv_in_address0(grp_convolution_fu_390_conv_in_address0),
    .conv_in_ce0(grp_convolution_fu_390_conv_in_ce0),
    .conv_in_q0(grp_convolution_fu_390_conv_in_q0),
    .kernel_address0(grp_convolution_fu_390_kernel_address0),
    .kernel_ce0(grp_convolution_fu_390_kernel_ce0),
    .kernel_q0(grp_convolution_fu_390_kernel_q0),
    .conv_out_address0(grp_convolution_fu_390_conv_out_address0),
    .conv_out_ce0(grp_convolution_fu_390_conv_out_ce0),
    .conv_out_we0(grp_convolution_fu_390_conv_out_we0),
    .conv_out_d0(grp_convolution_fu_390_conv_out_d0)
);

edge_detect_dadd_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
edge_detect_dadd_ibs_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

edge_detect_dmul_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
edge_detect_dmul_jbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

edge_detect_dmul_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
edge_detect_dmul_jbC_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_31_i_reg_759),
    .din1(ap_const_lv64_3FE2C8B439581062),
    .ce(1'b1),
    .dout(grp_fu_408_p2)
);

edge_detect_sitodkbM #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
edge_detect_sitodkbM_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_414_p0),
    .ce(1'b1),
    .dout(grp_fu_414_p1)
);

edge_detect_sitodkbM #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
edge_detect_sitodkbM_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_417_p0),
    .ce(1'b1),
    .dout(grp_fu_417_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond1_fu_426_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b0 == exitcond1_fu_426_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & ~(1'b0 == exitcond1_fu_426_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution_fu_390_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_i_fu_496_p2)) | (1'b1 == ap_CS_fsm_state30))) begin
            ap_reg_grp_convolution_fu_390_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution_fu_390_ap_ready)) begin
            ap_reg_grp_convolution_fu_390_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_ack_out) & (1'b1 == inStream_V_data_V_0_vld_out))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_in))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)) | ((inStream_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out)) & ~((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out))))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_dest_V_0_ack_out) & (1'b1 == inStream_V_dest_V_0_vld_out))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_in))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)) | ((1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)) | ((ap_const_lv2_3 == inStream_V_dest_V_0_state) & ~((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out)) & ~((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out))))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_id_V_0_ack_out) & (1'b1 == inStream_V_id_V_0_vld_out))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_in))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_id_V_0_state)) | ((1'b0 == inStream_V_id_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_id_V_0_state)))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_id_V_0_vld_in) & (1'b0 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_id_V_0_state)) | ((1'b0 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_id_V_0_state)))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_id_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_id_V_0_state)) | ((1'b1 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_id_V_0_state)) | ((ap_const_lv2_3 == inStream_V_id_V_0_state) & ~((1'b1 == inStream_V_id_V_0_vld_in) & (1'b0 == inStream_V_id_V_0_ack_out)) & ~((1'b0 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_out))))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_id_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_keep_V_0_ack_out) & (1'b1 == inStream_V_keep_V_0_vld_out))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_in))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_keep_V_0_state)) | ((1'b0 == inStream_V_keep_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_keep_V_0_state)))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b0 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_keep_V_0_state)) | ((1'b0 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_keep_V_0_state)))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_keep_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_keep_V_0_state)) | ((1'b1 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_keep_V_0_state)) | ((ap_const_lv2_3 == inStream_V_keep_V_0_state) & ~((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b0 == inStream_V_keep_V_0_ack_out)) & ~((1'b0 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_out))))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_keep_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_strb_V_0_ack_out) & (1'b1 == inStream_V_strb_V_0_vld_out))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_in))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_strb_V_0_state)) | ((1'b0 == inStream_V_strb_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_strb_V_0_state)))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b0 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_strb_V_0_state)) | ((1'b0 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_strb_V_0_state)))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_strb_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_strb_V_0_state)) | ((1'b1 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_strb_V_0_state)) | ((ap_const_lv2_3 == inStream_V_strb_V_0_state) & ~((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b0 == inStream_V_strb_V_0_ack_out)) & ~((1'b0 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_out))))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_strb_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_user_V_0_ack_out) & (1'b1 == inStream_V_user_V_0_vld_out))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_in))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_user_V_0_state)) | ((1'b0 == inStream_V_user_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_user_V_0_state)))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_user_V_0_vld_in) & (1'b0 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_user_V_0_state)) | ((1'b0 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_user_V_0_state)))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_user_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_user_V_0_state)) | ((1'b1 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_user_V_0_state)) | ((ap_const_lv2_3 == inStream_V_user_V_0_state) & ~((1'b1 == inStream_V_user_V_0_vld_in) & (1'b0 == inStream_V_user_V_0_ack_out)) & ~((1'b0 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_out))))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_user_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_ack_out) & (1'b1 == outStream_V_data_V_1_vld_out))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_in))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)) | ((1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)) | ((ap_const_lv2_3 == outStream_V_data_V_1_state) & ~((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out)) & ~((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out))))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_dest_V_1_ack_out) & (1'b1 == outStream_V_dest_V_1_vld_out))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_in))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)) | ((1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)) | ((ap_const_lv2_3 == outStream_V_dest_V_1_state) & ~((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out)) & ~((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out))))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_id_V_1_ack_out) & (1'b1 == outStream_V_id_V_1_vld_out))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_in))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)) | ((1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)) | ((ap_const_lv2_3 == outStream_V_id_V_1_state) & ~((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out)) & ~((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out))))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_keep_V_1_ack_out) & (1'b1 == outStream_V_keep_V_1_vld_out))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_in))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)) | ((1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)) | ((ap_const_lv2_3 == outStream_V_keep_V_1_state) & ~((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out)) & ~((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out))))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_ack_out) & (1'b1 == outStream_V_last_V_1_vld_out))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_in))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)) | ((1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)) | ((ap_const_lv2_3 == outStream_V_last_V_1_state) & ~((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out)) & ~((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out))))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_strb_V_1_ack_out) & (1'b1 == outStream_V_strb_V_1_vld_out))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_in))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)) | ((1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)) | ((ap_const_lv2_3 == outStream_V_strb_V_1_state) & ~((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out)) & ~((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out))))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_user_V_1_ack_out) & (1'b1 == outStream_V_user_V_1_vld_out))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_in))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)) | ((1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)) | ((ap_const_lv2_3 == outStream_V_user_V_1_state) & ~((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out)) & ~((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out))))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_368 <= ap_const_lv15_0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        i_i_reg_368 <= i_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(1'b0 == outStream_V_data_V_1_ack_in))) begin
        idx_1_reg_379 <= idx_3_reg_803;
    end else if (((1'b1 == ap_CS_fsm_state31) & ~(1'b0 == grp_convolution_fu_390_ap_done))) begin
        idx_1_reg_379 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        idx_reg_356 <= idx_2_reg_675;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        idx_reg_356 <= ap_const_lv15_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        exitcond1_reg_671 <= exitcond1_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_708 <= i_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        idx_2_reg_675 <= idx_2_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        idx_3_reg_803 <= idx_3_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_A)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_B)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_dest_V_0_load_A)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_dest_V_0_load_B)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_id_V_0_load_A)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_id_V_0_load_B)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_keep_V_0_load_A)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_keep_V_0_load_B)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_strb_V_0_load_A)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_strb_V_0_load_B)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_user_V_0_load_A)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_user_V_0_load_B)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        loc_V_1_reg_795 <= loc_V_1_fu_540_p1;
        loc_V_reg_789 <= {{p_Val2_s_fu_526_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_A)) begin
        outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_B)) begin
        outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_dest_V_1_load_A)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_dest_V_1_load_B)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_id_V_1_load_A)) begin
        outStream_V_id_V_1_payload_A <= tmp_id_V_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_id_V_1_load_B)) begin
        outStream_V_id_V_1_payload_B <= tmp_id_V_reg_291;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_keep_V_1_load_A)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_keep_V_1_load_B)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_A)) begin
        outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_B)) begin
        outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_strb_V_1_load_A)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_strb_V_1_load_B)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_user_V_1_load_A)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_user_V_1_load_B)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        pixelIn_blue_load_reg_764 <= pixelIn_blue_q0;
        tmp_28_i_reg_754 <= grp_fu_414_p1;
        tmp_31_i_reg_759 <= grp_fu_417_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pixelIn_green_load_reg_734 <= pixelIn_green_q0;
        pixelIn_red_load_reg_729 <= pixelIn_red_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_420 <= grp_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_32_i_reg_779 <= grp_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_33_i_reg_784 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_35_i_reg_774 <= grp_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        tmp_dest_V_reg_343 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_291 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_330 <= inStream_V_keep_V_0_data_out;
        tmp_strb_V_reg_317 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_304 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_i_fu_496_p2))) begin
        tmp_i_reg_713[14 : 0] <= tmp_i_fu_508_p1[14 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & ~((1'b0 == outStream_V_data_V_1_ack_in) | (ap_condition_1292 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & ~((1'b0 == outStream_V_data_V_1_ack_in) | (ap_condition_1292 == 1'b1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == exitcond_fu_644_p2))) begin
        edge_out_assign_address0 = ap_const_lv64_3FFF;
    end else if (((1'b1 == ap_CS_fsm_state32) & (1'b0 == exitcond_fu_644_p2))) begin
        edge_out_assign_address0 = tmp_8_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        edge_out_assign_address0 = grp_convolution_fu_390_conv_out_address0;
    end else begin
        edge_out_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (1'b0 == exitcond_fu_644_p2)) | ((1'b1 == ap_CS_fsm_state32) & ~(1'b0 == exitcond_fu_644_p2)))) begin
        edge_out_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        edge_out_assign_ce0 = grp_convolution_fu_390_conv_out_ce0;
    end else begin
        edge_out_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        edge_out_assign_we0 = grp_convolution_fu_390_conv_out_we0;
    end else begin
        edge_out_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grayOut_address0 = tmp_i_reg_713;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grayOut_address0 = grp_convolution_fu_390_conv_in_address0;
    end else begin
        grayOut_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grayOut_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grayOut_ce0 = grp_convolution_fu_390_conv_in_ce0;
    end else begin
        grayOut_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grayOut_we0 = 1'b1;
    end else begin
        grayOut_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_convolution_fu_390_conv_in_q0 = temp_image_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_convolution_fu_390_conv_in_q0 = grayOut_q0;
    end else begin
        grp_convolution_fu_390_conv_in_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_convolution_fu_390_kernel_q0 = y_op_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_convolution_fu_390_kernel_q0 = x_op_q0;
    end else begin
        grp_convolution_fu_390_kernel_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_399_p0 = tmp_33_i_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_399_p0 = reg_420;
    end else begin
        grp_fu_399_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_399_p1 = reg_420;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_399_p1 = tmp_32_i_reg_779;
    end else begin
        grp_fu_399_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_403_p0 = tmp_35_i_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_403_p0 = tmp_28_i_reg_754;
    end else begin
        grp_fu_403_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_403_p1 = ap_const_lv64_3FBD2F1A9FBE76C9;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_403_p1 = ap_const_lv64_3FD3212D77318FC5;
    end else begin
        grp_fu_403_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_414_p0 = tmp_34_i_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_414_p0 = tmp_i_16_fu_514_p1;
    end else begin
        grp_fu_414_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671))) begin
        idx_phi_fu_360_p4 = idx_2_reg_675;
    end else begin
        idx_phi_fu_360_p4 = idx_reg_356;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'b0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_data_V_0_sel)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_dest_V_0_sel)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_id_V_0_sel)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_keep_V_0_sel)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_strb_V_0_sel)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_user_V_0_sel)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'b1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        outStream_V_data_V_1_data_in = tmp_data_V_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        outStream_V_data_V_1_data_in = tmp_data_V_1_fu_661_p1;
    end else begin
        outStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_data_V_1_sel)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_dest_V_1_sel)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_id_V_1_sel)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_keep_V_1_sel)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        outStream_V_last_V_1_data_in = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        outStream_V_last_V_1_data_in = 1'b0;
    end else begin
        outStream_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_last_V_1_sel)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_strb_V_1_sel)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_user_V_1_sel)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_CS_fsm_state35) & ~(1'b0 == outStream_V_data_V_1_ack_in)))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pixelIn_blue_address0 = tmp_i_reg_713;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        pixelIn_blue_address0 = tmp_5_fu_467_p1;
    end else begin
        pixelIn_blue_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0))) | (1'b1 == ap_CS_fsm_state10))) begin
        pixelIn_blue_ce0 = 1'b1;
    end else begin
        pixelIn_blue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        pixelIn_blue_we0 = 1'b1;
    end else begin
        pixelIn_blue_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pixelIn_green_address0 = tmp_i_fu_508_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        pixelIn_green_address0 = tmp_5_fu_467_p1;
    end else begin
        pixelIn_green_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0))) | (1'b1 == ap_CS_fsm_state5))) begin
        pixelIn_green_ce0 = 1'b1;
    end else begin
        pixelIn_green_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        pixelIn_green_we0 = 1'b1;
    end else begin
        pixelIn_green_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pixelIn_red_address0 = tmp_i_fu_508_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        pixelIn_red_address0 = tmp_5_fu_467_p1;
    end else begin
        pixelIn_red_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0))) | (1'b1 == ap_CS_fsm_state5))) begin
        pixelIn_red_ce0 = 1'b1;
    end else begin
        pixelIn_red_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)))) begin
        pixelIn_red_we0 = 1'b1;
    end else begin
        pixelIn_red_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_image_address0 = grp_convolution_fu_390_conv_out_address0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_image_address0 = grp_convolution_fu_390_conv_in_address0;
    end else begin
        temp_image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_image_ce0 = grp_convolution_fu_390_conv_out_ce0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        temp_image_ce0 = grp_convolution_fu_390_conv_in_ce0;
    end else begin
        temp_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_image_we0 = grp_convolution_fu_390_conv_out_we0;
    end else begin
        temp_image_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond1_fu_426_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond1_reg_671) & (inStream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond1_fu_426_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_i_fu_496_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state29 : begin
            if (~(1'b0 == grp_convolution_fu_390_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (~(1'b0 == grp_convolution_fu_390_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (~(1'b0 == exitcond_fu_644_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (~(1'b0 == outStream_V_data_V_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (~(1'b0 == outStream_V_data_V_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (~(1'b0 == outStream_V_data_V_1_ack_in)) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (~((1'b0 == outStream_V_data_V_1_ack_in) | (ap_condition_1292 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_5];

always @ (*) begin
    ap_condition_1292 = ((outStream_V_data_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_426_p2 = ((idx_phi_fu_360_p4 == ap_const_lv15_4000) ? 1'b1 : 1'b0);

assign exitcond_fu_644_p2 = ((idx_1_reg_379 == ap_const_lv14_3FFF) ? 1'b1 : 1'b0);

assign exitcond_i_fu_496_p2 = ((i_i_reg_368 == ap_const_lv15_4000) ? 1'b1 : 1'b0);

assign grayOut_d0 = ((isNeg_fu_564_p3[0:0] === 1'b1) ? tmp_2_fu_621_p1 : tmp_3_fu_625_p4);

assign grp_convolution_fu_390_ap_start = ap_reg_grp_convolution_fu_390_ap_start;

assign grp_fu_417_p0 = pixelIn_green_load_reg_734;

assign i_fu_502_p2 = (i_i_reg_368 + ap_const_lv15_1);

assign idx_2_fu_432_p2 = (idx_phi_fu_360_p4 + ap_const_lv15_1);

assign idx_3_fu_650_p2 = (idx_1_reg_379 + ap_const_lv14_1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'b1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'b1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr & inStream_V_data_V_0_state_cmp_full);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'b0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'b1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_sel_wr & inStream_V_dest_V_0_state_cmp_full);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'b0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'b1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_sel_wr & inStream_V_id_V_0_state_cmp_full);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'b0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'b1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_sel_wr & inStream_V_keep_V_0_state_cmp_full);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'b0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'b1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_sel_wr & inStream_V_strb_V_0_state_cmp_full);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'b0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'b1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_sel_wr & inStream_V_user_V_0_state_cmp_full);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'b0];

assign isNeg_fu_564_p3 = sh_assign_fu_558_p2[ap_const_lv32_B];

assign loc_V_1_fu_540_p1 = p_Val2_s_fu_526_p1[51:0];

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'b1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr & outStream_V_data_V_1_state_cmp_full);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'b0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'b1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_sel_wr & outStream_V_dest_V_1_state_cmp_full);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'b1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_sel_wr & outStream_V_id_V_1_state_cmp_full);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'b0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'b1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_sel_wr & outStream_V_keep_V_1_state_cmp_full);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'b0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'b1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr & outStream_V_last_V_1_state_cmp_full);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'b0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'b1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_sel_wr & outStream_V_strb_V_1_state_cmp_full);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'b0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'b1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr & outStream_V_user_V_1_state_cmp_full);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'b0];

assign p_Result_s_fu_544_p3 = {{1'b1}, {loc_V_1_reg_795}};

assign p_Val2_s_fu_526_p1 = grp_fu_399_p2;

assign pixelIn_blue_d0 = {{inStream_V_data_V_0_data_out[ap_const_lv32_17 : ap_const_lv32_10]}};

assign pixelIn_green_d0 = {{inStream_V_data_V_0_data_out[ap_const_lv32_F : ap_const_lv32_8]}};

assign pixelIn_red_d0 = inStream_V_data_V_0_data_out[7:0];

assign sh_assign_1_cast_fu_589_p1 = $signed(sh_assign_1_fu_581_p3);

assign sh_assign_1_fu_581_p3 = ((isNeg_fu_564_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_577_p1 : sh_assign_fu_558_p2);

assign sh_assign_fu_558_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_i_cast2_fu_555_p1));

assign tmp_10_fu_613_p3 = tmp_2_i_i_i_fu_601_p2[ap_const_lv32_34];

assign tmp_1_i_i_i_cast_fu_597_p1 = $unsigned(sh_assign_1_cast_fu_589_p1);

assign tmp_1_i_i_i_fu_593_p1 = $unsigned(sh_assign_1_cast_fu_589_p1);

assign tmp_2_fu_621_p1 = tmp_10_fu_613_p3;

assign tmp_2_i_i_i_fu_601_p2 = p_Result_s_fu_544_p3 >> tmp_1_i_i_i_cast_fu_597_p1;

assign tmp_34_i_fu_522_p1 = pixelIn_blue_load_reg_764;

assign tmp_3_fu_625_p4 = {{tmp_3_i_i_i_fu_607_p2[ap_const_lv32_3B : ap_const_lv32_34]}};

assign tmp_3_i_i_i_fu_607_p2 = tmp_i_i_i_fu_551_p1 << tmp_1_i_i_i_fu_593_p1;

assign tmp_5_fu_467_p1 = idx_reg_356;

assign tmp_8_fu_656_p1 = idx_1_reg_379;

assign tmp_data_V_1_fu_661_p1 = edge_out_assign_q0;

assign tmp_data_V_fu_666_p1 = edge_out_assign_q0;

assign tmp_i_16_fu_514_p1 = pixelIn_red_load_reg_729;

assign tmp_i_fu_508_p1 = i_i_reg_368;

assign tmp_i_i_i_17_fu_572_p2 = (ap_const_lv11_3FF - loc_V_reg_789);

assign tmp_i_i_i_cast_fu_577_p1 = $signed(tmp_i_i_i_17_fu_572_p2);

assign tmp_i_i_i_fu_551_p1 = p_Result_s_fu_544_p3;

assign tmp_i_i_i_i_cast2_fu_555_p1 = loc_V_reg_789;

always @ (posedge ap_clk) begin
    tmp_i_reg_713[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //edge_detect
