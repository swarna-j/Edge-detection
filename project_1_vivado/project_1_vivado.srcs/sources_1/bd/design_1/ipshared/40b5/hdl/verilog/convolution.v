// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_in_address0,
        conv_in_ce0,
        conv_in_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 16'b1;
parameter    ap_ST_fsm_state2 = 16'b10;
parameter    ap_ST_fsm_state3 = 16'b100;
parameter    ap_ST_fsm_state4 = 16'b1000;
parameter    ap_ST_fsm_state5 = 16'b10000;
parameter    ap_ST_fsm_state6 = 16'b100000;
parameter    ap_ST_fsm_state7 = 16'b1000000;
parameter    ap_ST_fsm_state8 = 16'b10000000;
parameter    ap_ST_fsm_state9 = 16'b100000000;
parameter    ap_ST_fsm_state10 = 16'b1000000000;
parameter    ap_ST_fsm_state11 = 16'b10000000000;
parameter    ap_ST_fsm_state12 = 16'b100000000000;
parameter    ap_ST_fsm_state13 = 16'b1000000000000;
parameter    ap_ST_fsm_state14 = 16'b10000000000000;
parameter    ap_ST_fsm_state15 = 16'b100000000000000;
parameter    ap_ST_fsm_state16 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] conv_in_address0;
output   conv_in_ce0;
input  [7:0] conv_in_q0;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [7:0] kernel_q0;
output  [13:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [7:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_in_ce0;
reg kernel_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [7:0] i_1_fu_188_p2;
reg   [7:0] i_1_reg_578;
wire   [0:0] ap_CS_fsm_state2;
wire   [13:0] tmp_fu_198_p3;
reg   [13:0] tmp_reg_583;
wire   [0:0] exitcond3_fu_182_p2;
wire   [13:0] j_cast8_fu_206_p1;
reg   [13:0] j_cast8_reg_588;
wire   [0:0] ap_CS_fsm_state3;
wire   [7:0] j_1_fu_216_p2;
reg   [7:0] j_1_reg_596;
wire   [1:0] m_1_fu_232_p2;
reg   [1:0] m_1_reg_604;
wire   [0:0] ap_CS_fsm_state4;
wire   [15:0] tmp_5_fu_286_p3;
reg   [15:0] tmp_5_reg_609;
wire   [0:0] exitcond1_fu_226_p2;
wire   [4:0] nn_fu_312_p2;
reg   [4:0] nn_reg_614;
wire   [0:0] tmp1_fu_318_p2;
reg   [0:0] tmp1_reg_619;
wire   [1:0] n_1_fu_468_p2;
reg   [1:0] n_1_reg_627;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] tmp_8_fu_494_p2;
reg   [0:0] tmp_8_reg_632;
wire   [0:0] exitcond_fu_462_p2;
wire   [0:0] icmp3_fu_510_p2;
reg   [0:0] icmp3_reg_637;
wire   [15:0] tmp_15_fu_548_p2;
reg   [15:0] tmp_15_reg_652;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [31:0] grp_fu_179_p1;
reg   [31:0] tmp_17_reg_662;
wire   [0:0] ap_CS_fsm_state11;
wire   [31:0] sum_2_fu_567_p3;
wire   [0:0] ap_CS_fsm_state16;
reg   [7:0] i_reg_104;
wire   [0:0] exitcond2_fu_210_p2;
reg   [7:0] j_reg_116;
reg   [1:0] m_reg_128;
reg   [31:0] x_assign_reg_139;
reg   [1:0] n_reg_151;
reg   [31:0] sum_1_reg_162;
wire   [63:0] tmp_1_fu_449_p1;
wire  signed [63:0] tmp_11_fu_521_p1;
wire   [63:0] tmp_14_fu_535_p1;
wire   [0:0] ap_CS_fsm_state12;
wire  signed [31:0] grp_fu_179_p0;
wire   [6:0] tmp_12_fu_194_p1;
wire   [1:0] mm_fu_238_p2;
wire   [7:0] m_cast7_fu_222_p1;
wire   [7:0] tmp_2_fu_248_p2;
wire   [8:0] tmp_2_cast_fu_254_p1;
wire   [8:0] rowIndex_fu_258_p2;
wire   [1:0] tmp_22_fu_270_p4;
wire   [3:0] p_shl_fu_294_p3;
wire   [4:0] p_shl_cast_fu_302_p1;
wire   [4:0] mm_cast6_fu_244_p1;
wire   [4:0] tmp_6_fu_306_p2;
wire   [0:0] tmp_3_fu_264_p2;
wire   [0:0] icmp_fu_280_p2;
wire   [31:0] p_Val2_s_fu_324_p1;
wire   [22:0] loc_V_2_fu_338_p1;
wire   [23:0] p_Result_s_fu_342_p3;
wire   [7:0] loc_V_fu_328_p4;
wire   [8:0] tmp_i_i_i_cast3_fu_354_p1;
wire   [8:0] sh_assign_fu_358_p2;
wire   [7:0] tmp_7_i_i_fu_372_p2;
wire   [0:0] isNeg_fu_364_p3;
wire  signed [8:0] tmp_7_i_i_cast_fu_378_p1;
wire   [8:0] sh_assign_2_fu_382_p3;
wire  signed [31:0] sh_assign_2_cast_fu_390_p1;
wire  signed [23:0] sh_assign_2_cast_cas_fu_394_p1;
wire   [53:0] tmp_5_i_i_fu_350_p1;
wire   [53:0] tmp_9_i_i_fu_398_p1;
wire   [23:0] tmp_i_i_fu_402_p2;
wire   [0:0] tmp_21_fu_414_p3;
wire   [53:0] tmp_2_i_i_fu_408_p2;
wire   [7:0] tmp_4_fu_422_p1;
wire   [7:0] tmp_9_fu_426_p4;
wire   [13:0] tmp_s_fu_445_p2;
wire   [7:0] n_cast5_fu_454_p1;
wire   [7:0] tmp_7_fu_474_p2;
wire   [8:0] tmp_7_cast_fu_480_p1;
wire   [8:0] colIndex_fu_484_p2;
wire   [1:0] tmp_23_fu_500_p4;
wire  signed [15:0] colIndex_cast_fu_490_p1;
wire   [15:0] tmp_10_fu_516_p2;
wire   [4:0] n_cast4_fu_458_p1;
wire   [4:0] tmp_13_fu_526_p2;
wire  signed [31:0] tmp_13_cast_fu_531_p1;
wire   [7:0] tmp_15_fu_548_p0;
wire  signed [7:0] tmp_15_fu_548_p1;
wire   [0:0] tmp2_fu_558_p2;
wire   [0:0] or_cond5_fu_562_p2;
wire   [31:0] grp_fu_174_p2;
reg   [15:0] ap_NS_fsm;
wire   [15:0] tmp_15_fu_548_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'b1;
end

edge_detect_fadd_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
edge_detect_fadd_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_1_reg_162),
    .din1(tmp_17_reg_662),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

edge_detect_sitofcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
edge_detect_sitofcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_179_p0),
    .ce(1'b1),
    .dout(grp_fu_179_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond2_fu_210_p2))) begin
        i_reg_104 <= i_1_reg_578;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_104 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_182_p2 == 1'b0))) begin
        j_reg_116 <= ap_const_lv8_0;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond1_fu_226_p2))) begin
        j_reg_116 <= j_1_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_210_p2))) begin
        m_reg_128 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_462_p2))) begin
        m_reg_128 <= m_1_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        n_reg_151 <= n_1_reg_627;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_226_p2))) begin
        n_reg_151 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_1_reg_162 <= sum_2_fu_567_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_226_p2))) begin
        sum_1_reg_162 <= x_assign_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond2_fu_210_p2))) begin
        x_assign_reg_139 <= ap_const_lv32_0;
    end else if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == exitcond_fu_462_p2))) begin
        x_assign_reg_139 <= sum_1_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_578 <= i_1_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == exitcond_fu_462_p2))) begin
        icmp3_reg_637 <= icmp3_fu_510_p2;
        tmp_8_reg_632 <= tmp_8_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_596 <= j_1_fu_216_p2;
        j_cast8_reg_588[7 : 0] <= j_cast8_fu_206_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_1_reg_604 <= m_1_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_1_reg_627 <= n_1_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond1_fu_226_p2))) begin
        nn_reg_614 <= nn_fu_312_p2;
        tmp1_reg_619 <= tmp1_fu_318_p2;
        tmp_5_reg_609[15 : 7] <= tmp_5_fu_286_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_15_reg_652 <= tmp_15_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_17_reg_662 <= grp_fu_179_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_182_p2 == 1'b0))) begin
        tmp_reg_583[13 : 7] <= tmp_fu_198_p3[13 : 7];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~(exitcond3_fu_182_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond3_fu_182_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_in_ce0 = 1'b1;
    end else begin
        conv_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond1_fu_226_p2))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond3_fu_182_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond2_fu_210_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond1_fu_226_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == exitcond_fu_462_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign colIndex_cast_fu_490_p1 = $signed(colIndex_fu_484_p2);

assign colIndex_fu_484_p2 = ($signed(tmp_7_cast_fu_480_p1) + $signed(ap_const_lv9_1FF));

assign conv_in_address0 = tmp_11_fu_521_p1;

assign conv_out_address0 = tmp_1_fu_449_p1;

assign conv_out_d0 = ((isNeg_fu_364_p3[0:0] === 1'b1) ? tmp_4_fu_422_p1 : tmp_9_fu_426_p4);

assign exitcond1_fu_226_p2 = ((m_reg_128 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond2_fu_210_p2 = ((j_reg_116 == ap_const_lv8_80) ? 1'b1 : 1'b0);

assign exitcond3_fu_182_p2 = ((i_reg_104 == ap_const_lv8_80) ? 1'b1 : 1'b0);

assign exitcond_fu_462_p2 = ((n_reg_151 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign grp_fu_179_p0 = $signed(tmp_15_reg_652);

assign i_1_fu_188_p2 = (i_reg_104 + ap_const_lv8_1);

assign icmp3_fu_510_p2 = ((tmp_23_fu_500_p4 != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign icmp_fu_280_p2 = ((tmp_22_fu_270_p4 != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign isNeg_fu_364_p3 = sh_assign_fu_358_p2[ap_const_lv32_8];

assign j_1_fu_216_p2 = (j_reg_116 + ap_const_lv8_1);

assign j_cast8_fu_206_p1 = j_reg_116;

assign kernel_address0 = tmp_14_fu_535_p1;

assign loc_V_2_fu_338_p1 = p_Val2_s_fu_324_p1[22:0];

assign loc_V_fu_328_p4 = {{p_Val2_s_fu_324_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign m_1_fu_232_p2 = (m_reg_128 + ap_const_lv2_1);

assign m_cast7_fu_222_p1 = m_reg_128;

assign mm_cast6_fu_244_p1 = mm_fu_238_p2;

assign mm_fu_238_p2 = ($signed(ap_const_lv2_2) - $signed(m_reg_128));

assign n_1_fu_468_p2 = (n_reg_151 + ap_const_lv2_1);

assign n_cast4_fu_458_p1 = n_reg_151;

assign n_cast5_fu_454_p1 = n_reg_151;

assign nn_fu_312_p2 = (tmp_6_fu_306_p2 + ap_const_lv5_2);

assign or_cond5_fu_562_p2 = (tmp2_fu_558_p2 & tmp1_reg_619);

assign p_Result_s_fu_342_p3 = {{1'b1}, {loc_V_2_fu_338_p1}};

assign p_Val2_s_fu_324_p1 = x_assign_reg_139;

assign p_shl_cast_fu_302_p1 = p_shl_fu_294_p3;

assign p_shl_fu_294_p3 = {{mm_fu_238_p2}, {ap_const_lv2_0}};

assign rowIndex_fu_258_p2 = ($signed(tmp_2_cast_fu_254_p1) + $signed(ap_const_lv9_1FF));

assign sh_assign_2_cast_cas_fu_394_p1 = $signed(sh_assign_2_fu_382_p3);

assign sh_assign_2_cast_fu_390_p1 = $signed(sh_assign_2_fu_382_p3);

assign sh_assign_2_fu_382_p3 = ((isNeg_fu_364_p3[0:0] === 1'b1) ? tmp_7_i_i_cast_fu_378_p1 : sh_assign_fu_358_p2);

assign sh_assign_fu_358_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast3_fu_354_p1));

assign sum_2_fu_567_p3 = ((or_cond5_fu_562_p2[0:0] === 1'b1) ? grp_fu_174_p2 : sum_1_reg_162);

assign tmp1_fu_318_p2 = (tmp_3_fu_264_p2 & icmp_fu_280_p2);

assign tmp2_fu_558_p2 = (tmp_8_reg_632 & icmp3_reg_637);

assign tmp_10_fu_516_p2 = ($signed(tmp_5_reg_609) + $signed(colIndex_cast_fu_490_p1));

assign tmp_11_fu_521_p1 = $signed(tmp_10_fu_516_p2);

assign tmp_12_fu_194_p1 = i_reg_104[6:0];

assign tmp_13_cast_fu_531_p1 = $signed(tmp_13_fu_526_p2);

assign tmp_13_fu_526_p2 = (nn_reg_614 - n_cast4_fu_458_p1);

assign tmp_14_fu_535_p1 = $unsigned(tmp_13_cast_fu_531_p1);

assign tmp_15_fu_548_p0 = tmp_15_fu_548_p00;

assign tmp_15_fu_548_p00 = conv_in_q0;

assign tmp_15_fu_548_p1 = kernel_q0;

assign tmp_15_fu_548_p2 = ($signed({{1'b0}, {tmp_15_fu_548_p0}}) * $signed(tmp_15_fu_548_p1));

assign tmp_1_fu_449_p1 = tmp_s_fu_445_p2;

assign tmp_21_fu_414_p3 = tmp_i_i_fu_402_p2[ap_const_lv32_17];

assign tmp_22_fu_270_p4 = {{rowIndex_fu_258_p2[ap_const_lv32_8 : ap_const_lv32_7]}};

assign tmp_23_fu_500_p4 = {{colIndex_fu_484_p2[ap_const_lv32_8 : ap_const_lv32_7]}};

assign tmp_2_cast_fu_254_p1 = tmp_2_fu_248_p2;

assign tmp_2_fu_248_p2 = (m_cast7_fu_222_p1 + i_reg_104);

assign tmp_2_i_i_fu_408_p2 = tmp_5_i_i_fu_350_p1 << tmp_9_i_i_fu_398_p1;

assign tmp_3_fu_264_p2 = ((tmp_2_fu_248_p2 != ap_const_lv8_0) ? 1'b1 : 1'b0);

assign tmp_4_fu_422_p1 = tmp_21_fu_414_p3;

assign tmp_5_fu_286_p3 = {{rowIndex_fu_258_p2}, {ap_const_lv7_0}};

assign tmp_5_i_i_fu_350_p1 = p_Result_s_fu_342_p3;

assign tmp_6_fu_306_p2 = (p_shl_cast_fu_302_p1 - mm_cast6_fu_244_p1);

assign tmp_7_cast_fu_480_p1 = tmp_7_fu_474_p2;

assign tmp_7_fu_474_p2 = (n_cast5_fu_454_p1 + j_reg_116);

assign tmp_7_i_i_cast_fu_378_p1 = $signed(tmp_7_i_i_fu_372_p2);

assign tmp_7_i_i_fu_372_p2 = (ap_const_lv8_7F - loc_V_fu_328_p4);

assign tmp_8_fu_494_p2 = ((tmp_7_fu_474_p2 != ap_const_lv8_0) ? 1'b1 : 1'b0);

assign tmp_9_fu_426_p4 = {{tmp_2_i_i_fu_408_p2[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_9_i_i_fu_398_p1 = $unsigned(sh_assign_2_cast_fu_390_p1);

assign tmp_fu_198_p3 = {{tmp_12_fu_194_p1}, {ap_const_lv7_0}};

assign tmp_i_i_fu_402_p2 = p_Result_s_fu_342_p3 >> sh_assign_2_cast_cas_fu_394_p1;

assign tmp_i_i_i_cast3_fu_354_p1 = loc_V_fu_328_p4;

assign tmp_s_fu_445_p2 = (j_cast8_reg_588 + tmp_reg_583);

always @ (posedge ap_clk) begin
    tmp_reg_583[6:0] <= 7'b0000000;
    j_cast8_reg_588[13:8] <= 6'b000000;
    tmp_5_reg_609[6:0] <= 7'b0000000;
end

endmodule //convolution
